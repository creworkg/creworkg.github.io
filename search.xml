<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HEXO Usage</title>
    <url>/2022/09/13/HEXO-Usage/</url>
    <content><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/writing">Hexo Usage</a></p>
<p><a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md">Hexo-theme-pure config</a></p>
<p><a href="https://theme-next.js.org/docs/">Theme Next Doc</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Singleton</title>
    <url>/2023/02/19/Singleton/</url>
    <content><![CDATA[<p>单例模式在生产中的使用频率非常的高，也很简单，要满足两个要点：</p>
<ol>
<li>必须自己创建自己</li>
<li>必须向整个系统提供自己</li>
</ol>
<p>实现单例模式的方法有很多，本文实现一个最简洁的版本。</p>
<span id="more"></span>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Singleton</span>();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">Singleton</span>();</span><br><span class="line">    <span class="function"><span class="type">static</span> shared_ptr&lt;Singleton&gt;&amp; <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> <span class="type">static</span> instance = <span class="built_in">shared_ptr</span>&lt;Singleton&gt;(<span class="keyword">new</span> <span class="built_in">Singleton</span>());</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton::<span class="built_in">Singleton</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Singleton constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton::~<span class="built_in">Singleton</span>()</span><br><span class="line">&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Singleton destructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> singlton = Singleton::<span class="built_in">getInstance</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>design pattern</category>
        <category>Singleton</category>
      </categories>
  </entry>
  <entry>
    <title>ZEN</title>
    <url>/2022/09/10/ZEN/</url>
    <content><![CDATA[<p>当你做某件事的时候，一旦想要求快，就表示你在也不关心它，只想去做别的事。<br><em>《禅与摩托车维修艺术》</em></p>
<hr>
<span id="more"></span>

<p>禅，<br>是踏实的态度，<br>一步一个脚印，<br>确定方向和方法，<br>坚持原则和目标，<br>时时努力，<br>事事检讨，<br>确实把握时间、空间的因缘聚会。</p>
<p>学习禅法的人，<br>一定是非常踏实、<br>认真的生活，<br>生活中有方法，<br>有方向，有原则，有目标，<br>而且是不断地努力。</p>
<p>以过程为目标，<br>以失败为经验，<br>已成功为起点，<br>以现在为全部。</p>
<p>不眷恋过去，<br>不夢想未來，<br>是將全部的生命，<br>活活潑潑投注於現在。</p>
<p>不眷戀過去，<br>不夢想未來，<br>隨時隨地努力於現在。</p>
<p>超越的態度是，<br>超越個人的得失，<br>超越暫時的成敗，<br>超越有形的強弱，<br>超越有無的價值，<br>超越自我的執著。</p>
<p>逐步的成功，<br>一步有一步的成功，<br>一時有一時的成功。</p>
<p>「無所住」就是不執著任何事，<br>但也不是住在定中不動，<br>而是以智慧心和慈悲心，<br>在平常生活中，<br>照樣的生活、待人接物。</p>
<p>小成功是個人的，<br>一時的、局部的，<br>大成功是團體的，<br>社會的、全民全世界的，<br>能歷久彌新、普遍廣大，<br>具有正面影響力。</p>
<p>但求奉獻自己，<br>普度眾生，<br>離苦得樂，<br>才能做到究竟圓滿的大成功。</p>
<p>佛法中悲智雙運、福慧滿足，<br>就是人格的大完成，<br>做人完全成功就能成佛，<br>人成即佛成。</p>
<p>方法是，<br>用自己的才能，<br>配合擁有的資源，<br>並要運用先天的福報和智慧。</p>
<p>方法要不斷學習、練習，<br>不斷試驗、體會，<br>再修正偏差，<br>再選擇。</p>
<p>要多學習、多練習，<br>多吸取前人的經驗，<br>多聽專家的忠告，<br>多了解自己，<br>多觀察環境。</p>
<p>時時學習著，<br>提得起·放得下，<br>收放自如，<br>進退自由，<br>當進則進，<br>當退则退。</p>
<p>以人格的成長，道德的成熟，<br>求得身心的平安，<br>無愧於天、無愧於地，<br>無愧於自己的心，<br>就算是成功。</p>
<p><em>—圣严法师</em></p>
<hr>
]]></content>
      <categories>
        <category>zen</category>
      </categories>
      <tags>
        <tag>zen</tag>
      </tags>
  </entry>
  <entry>
    <title>a++和++a的区别</title>
    <url>/2023/02/19/a++%E5%92%8C++a%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>对以下代码进行汇编，然后查看汇编：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    a++;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    ++a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="x86-64汇编"><a href="#x86-64汇编" class="headerlink" title="x86-64汇编"></a>x86-64汇编</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">        push    rbp</span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        mov     DWORD PTR [rbp-4], 1</span><br><span class="line">        add     DWORD PTR [rbp-4], 1</span><br><span class="line">        mov     DWORD PTR [rbp-4], 2</span><br><span class="line">        add     DWORD PTR [rbp-4], 1</span><br><span class="line">        mov     eax, 0</span><br><span class="line">        pop     rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure>
<h1 id="arm汇编"><a href="#arm汇编" class="headerlink" title="arm汇编"></a>arm汇编</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">        push    &#123;r7&#125;</span><br><span class="line">        sub     sp, sp, #12</span><br><span class="line">        add     r7, sp, #0</span><br><span class="line">        movs    r3, #1</span><br><span class="line">        str     r3, [r7, #4]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        adds    r3, r3, #1</span><br><span class="line">        str     r3, [r7, #4]</span><br><span class="line">        movs    r3, #2</span><br><span class="line">        str     r3, [r7, #4]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        adds    r3, r3, #1</span><br><span class="line">        str     r3, [r7, #4]</span><br><span class="line">        movs    r3, #0</span><br><span class="line">        mov     r0, r3</span><br><span class="line">        adds    r7, r7, #12</span><br><span class="line">        mov     sp, r7</span><br><span class="line">        ldr     r7, [sp], #4</span><br><span class="line">        bx      lr</span><br></pre></td></tr></table></figure>
<h1 id="用来赋值"><a href="#用来赋值" class="headerlink" title="用来赋值"></a>用来赋值</h1><p>发现并没有区别，用它来赋值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    b = a++;</span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">    b = ++a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">        push    &#123;r7&#125;</span><br><span class="line">        sub     sp, sp, #12</span><br><span class="line">        add     r7, sp, #0</span><br><span class="line">        movs    r3, #1</span><br><span class="line">        str     r3, [r7, #4]</span><br><span class="line">        movs    r3, #3</span><br><span class="line">        str     r3, [r7]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        adds    r2, r3, #1</span><br><span class="line">        str     r2, [r7, #4]</span><br><span class="line">        str     r3, [r7]</span><br><span class="line">        movs    r3, #2</span><br><span class="line">        str     r3, [r7, #4]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        adds    r3, r3, #1</span><br><span class="line">        str     r3, [r7, #4]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        str     r3, [r7]</span><br><span class="line">        movs    r3, #0</span><br><span class="line">        mov     r0, r3</span><br><span class="line">        adds    r7, r7, #12</span><br><span class="line">        mov     sp, r7</span><br><span class="line">        ldr     r7, [sp], #4</span><br><span class="line">        bx      lr</span><br></pre></td></tr></table></figure>
<p>会发现其实在arm cpu中，++a反而要多操作一次内存。而在x86-64的机器上++a会少一条指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">        push    rbp</span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        mov     DWORD PTR [rbp-4], 1</span><br><span class="line">        mov     DWORD PTR [rbp-8], 3</span><br><span class="line">        mov     eax, DWORD PTR [rbp-4]</span><br><span class="line">        lea     edx, [rax+1]</span><br><span class="line">        mov     DWORD PTR [rbp-4], edx</span><br><span class="line">        mov     DWORD PTR [rbp-8], eax</span><br><span class="line">        mov     DWORD PTR [rbp-4], 2</span><br><span class="line">        add     DWORD PTR [rbp-4], 1</span><br><span class="line">        mov     eax, DWORD PTR [rbp-4]</span><br><span class="line">        mov     DWORD PTR [rbp-8], eax</span><br><span class="line">        mov     eax, 0</span><br><span class="line">        pop     rbp</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c/cpp</category>
      </categories>
      <tags>
        <tag>c/cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>bazel入门-External Dependencies</title>
    <url>/2022/10/31/bazel%E5%85%A5%E9%97%A8-External-Dependencies/</url>
    <content><![CDATA[<p>介绍bazel中共享变量的使用方法，参见bazel官方文档：<br><a href="https://bazel.build/build/external">https://bazel.build/build/external</a></p>
<span id="more"></span>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1>]]></content>
  </entry>
  <entry>
    <title>bazel入门-Sharing Variables</title>
    <url>/2022/10/31/bazel%E5%85%A5%E9%97%A8-Sharing%20Variables/</url>
    <content><![CDATA[<p>介绍bazel中共享变量的使用方法，参见bazel官方文档：<br><a href="https://bazel.build/build/share-variables">https://bazel.build/build/share-variables</a></p>
<span id="more"></span>

<h1 id="实现变量共享的两种方法"><a href="#实现变量共享的两种方法" class="headerlink" title="实现变量共享的两种方法"></a>实现变量共享的两种方法</h1><ol>
<li><p>在同一个文件中定义一个变量，并在接下来涉及到的地方引用它</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">COPTS = [<span class="string">&quot;-DVERSION=5&quot;</span>]</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">  name = <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  copts = COPTS,</span><br><span class="line">  srcs = [<span class="string">&quot;foo.cc&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">  name = <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">  copts = COPTS,</span><br><span class="line">  srcs = [<span class="string">&quot;bar.cc&quot;</span>],</span><br><span class="line">  deps = [<span class="string">&quot;:foo&quot;</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用load引用其他文件的变量</p>
</li>
</ol>
<p>In path&#x2F;to&#x2F;variables.bzl, write:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">COPTS = [<span class="string">&quot;-DVERSION=5&quot;</span>]</span><br></pre></td></tr></table></figure>
<p>Then, you can update your BUILD files to access the variable:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">load(<span class="string">&quot;//path/to:variables.bzl&quot;</span>, <span class="string">&quot;COPTS&quot;</span>)</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">  name = <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">  copts = COPTS,</span><br><span class="line">  srcs = [<span class="string">&quot;foo.cc&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">  name = <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">  copts = COPTS,</span><br><span class="line">  srcs = [<span class="string">&quot;bar.cc&quot;</span>],</span><br><span class="line">  deps = [<span class="string">&quot;:foo&quot;</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>freeRTOS-调度器切换线程过程分析</title>
    <url>/2022/09/13/freeRTOS-%E8%B0%83%E5%BA%A6%E5%99%A8%E5%88%87%E6%8D%A2%E7%BA%BF%E7%A8%8B%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>这篇文章分析线程切换的过程<br>为了叙述更清晰，不再贴大段的代码，而是先描述函数主要功能，再撷取重要的代码片段来讲述</p>
</blockquote>
<span id="more"></span>

<h1 id="vTaskSwitchContext"><a href="#vTaskSwitchContext" class="headerlink" title="vTaskSwitchContext"></a>vTaskSwitchContext</h1><h2 id="taskSELECT-HIGHEST-PRIORITY-TASK"><a href="#taskSELECT-HIGHEST-PRIORITY-TASK" class="headerlink" title="taskSELECT_HIGHEST_PRIORITY_TASK"></a>taskSELECT_HIGHEST_PRIORITY_TASK</h2><p>找到优先级最高的就绪任务，并将该任务的句柄赋值给 <code>pxCurrentTCB</code>。</p>
<p>有两种方式，实现的效果一样，只是效率有差异，通过遍历每一个优先级列表找到最高优先级任务</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> taskSELECT_HIGHEST_PRIORITY_TASK()														\</span></span><br><span class="line"><span class="meta">&#123;																								\</span></span><br><span class="line"><span class="meta">UBaseType_t uxTopPriority;																		\</span></span><br><span class="line"><span class="meta">                                                \</span></span><br><span class="line"><span class="meta">  <span class="comment">/* Find the highest priority list that contains ready tasks. */</span>								\</span></span><br><span class="line"><span class="meta">  portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\</span></span><br><span class="line"><span class="meta">  configASSERT( listCURRENT_LIST_LENGTH( &amp;( pxReadyTasksLists[ uxTopPriority ] ) ) &gt; 0 );		\</span></span><br><span class="line"><span class="meta">  listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &amp;( pxReadyTasksLists[ uxTopPriority ] ) );		\</span></span><br><span class="line"><span class="meta">&#125; <span class="comment">/* taskSELECT_HIGHEST_PRIORITY_TASK() */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> taskSELECT_HIGHEST_PRIORITY_TASK()															\</span></span><br><span class="line"><span class="meta">	&#123;																									\</span></span><br><span class="line"><span class="meta">	UBaseType_t uxTopPriority = uxTopReadyPriority;														\</span></span><br><span class="line"><span class="meta">																										\</span></span><br><span class="line"><span class="meta">		<span class="comment">/* Find the highest priority queue that contains ready tasks. */</span>								\</span></span><br><span class="line"><span class="meta">		while( listLIST_IS_EMPTY( &amp;( pxReadyTasksLists[ uxTopPriority ] ) ) )							\</span></span><br><span class="line"><span class="meta">		&#123;																								\</span></span><br><span class="line"><span class="meta">			configASSERT( uxTopPriority );																\</span></span><br><span class="line"><span class="meta">			--uxTopPriority;																			\</span></span><br><span class="line"><span class="meta">		&#125;																								\</span></span><br><span class="line"><span class="meta">																										\</span></span><br><span class="line"><span class="meta">		<span class="comment">/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\</span></span></span><br><span class="line"><span class="comment"><span class="meta">		the	same priority get an equal share of the processor time. */</span>									\</span></span><br><span class="line"><span class="meta">		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &amp;( pxReadyTasksLists[ uxTopPriority ] ) );			\</span></span><br><span class="line"><span class="meta">		uxTopReadyPriority = uxTopPriority;																\</span></span><br><span class="line"><span class="meta">	&#125; <span class="comment">/* taskSELECT_HIGHEST_PRIORITY_TASK */</span></span></span><br></pre></td></tr></table></figure>

<h1 id="xPortPendSVHandler"><a href="#xPortPendSVHandler" class="headerlink" title="xPortPendSVHandler"></a>xPortPendSVHandler</h1><p>真正的线程切换，发生在这里：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__asm <span class="type">void</span> <span class="title function_">xPortPendSVHandler</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">extern</span> uxCriticalNesting;</span><br><span class="line">	<span class="keyword">extern</span> pxCurrentTCB;</span><br><span class="line">	<span class="keyword">extern</span> vTaskSwitchContext;</span><br><span class="line"></span><br><span class="line">	PRESERVE8</span><br><span class="line"></span><br><span class="line">	mrs r0, psp <span class="comment">// 将psp指针的值赋给R0</span></span><br><span class="line">	isb</span><br><span class="line">	<span class="comment">/* Get the location of the current TCB. */</span></span><br><span class="line">	ldr	r3, =pxCurrentTCB <span class="comment">//将当前任务的tcb地址赋给R3</span></span><br><span class="line">	ldr	r2, [r3] <span class="comment">//获取当前任务的栈顶指针的地址</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Is the task using the FPU context?  If so, push high vfp registers. */</span></span><br><span class="line">	tst r14, #<span class="number">0x10</span></span><br><span class="line">	it eq</span><br><span class="line">	vstmdbeq r0!, &#123;s16-s31&#125; <span class="comment">//手动保持浮点寄存器</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Save the core registers. */</span></span><br><span class="line">	stmdb r0!, &#123;r4-r11, r14&#125; <span class="comment">//手动保存callee-saved register</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Save the new top of stack into the first member of the TCB. */</span></span><br><span class="line">	str r0, [r2]</span><br><span class="line"></span><br><span class="line">	stmdb sp!, &#123;r0, r3&#125; <span class="comment">//保存R0-R3寄存器，因为调用函数vTaskSwitchContext会破坏现场，这里是将数值保存在msp！</span></span><br><span class="line">	mov r0, #configMAX_SYSCALL_INTERRUPT_PRIORITY</span><br><span class="line">	msr basepri, r0 <span class="comment">//屏蔽中断</span></span><br><span class="line">	dsb</span><br><span class="line">	isb</span><br><span class="line">	bl vTaskSwitchContext <span class="comment">//选出最高的优先级任务</span></span><br><span class="line">	mov r0, #<span class="number">0</span></span><br><span class="line">	msr basepri, r0 <span class="comment">//开启中断</span></span><br><span class="line">	ldmia sp!, &#123;r0, r3&#125; <span class="comment">//恢复寄存器 </span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* The first item in pxCurrentTCB is the task top of stack. */</span></span><br><span class="line">	ldr r1, [r3] <span class="comment">//R3始终指向已经指向pxCurrentTCB，但此时，pxCurrentTCB已经指向了新的任务tcb</span></span><br><span class="line">	ldr r0, [r1] <span class="comment">//获取新的任务栈指针</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Pop the core registers. */</span></span><br><span class="line">	ldmia r0!, &#123;r4-r11, r14&#125; <span class="comment">//恢复</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Is the task using the FPU context?  If so, pop the high vfp registers</span></span><br><span class="line"><span class="comment">	too. */</span></span><br><span class="line">	tst r14, #<span class="number">0x10</span></span><br><span class="line">	it eq</span><br><span class="line">	vldmiaeq r0!, &#123;s16-s31&#125; <span class="comment">//恢复</span></span><br><span class="line"></span><br><span class="line">	msr psp, r0 <span class="comment">//更新psp</span></span><br><span class="line">	isb</span><br><span class="line">	<span class="meta">#<span class="keyword">ifdef</span> WORKAROUND_PMU_CM001 <span class="comment">/* XMC4000 specific errata */</span></span></span><br><span class="line">		<span class="meta">#<span class="keyword">if</span> WORKAROUND_PMU_CM001 == 1</span></span><br><span class="line">			push &#123; r14 &#125;</span><br><span class="line">			pop &#123; pc &#125;</span><br><span class="line">			nop</span><br><span class="line">		<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	bx r14 <span class="comment">//跳到新的任务执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>xPortPendSVHandler</code>函数执行完后，就进入了新的任务</p>
<p>那么这个函数是何时触发的呢？</p>
<h1 id="xPortSysTickHandler"><a href="#xPortSysTickHandler" class="headerlink" title="xPortSysTickHandler"></a>xPortSysTickHandler</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">xPortSysTickHandler</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* The SysTick runs at the lowest interrupt priority, so when this interrupt</span></span><br><span class="line"><span class="comment">	executes all interrupts must be unmasked.  There is therefore no need to</span></span><br><span class="line"><span class="comment">	save and then restore the interrupt mask value as its value is already</span></span><br><span class="line"><span class="comment">	known - therefore the slightly faster vPortRaiseBASEPRI() function is used</span></span><br><span class="line"><span class="comment">	in place of portSET_INTERRUPT_MASK_FROM_ISR(). */</span></span><br><span class="line">	vPortRaiseBASEPRI();</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* Increment the RTOS tick. */</span></span><br><span class="line">		<span class="keyword">if</span>( xTaskIncrementTick() != pdFALSE )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* A context switch is required.  Context switching is performed in</span></span><br><span class="line"><span class="comment">			the PendSV interrupt.  Pend the PendSV interrupt. */</span></span><br><span class="line">			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	vPortClearBASEPRIFromISR();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;</code>这条语句将PenSV挂起，等到没有更高优先级中断执行时，任务切换就开始了</p>
<p>发现还有几个函数：</p>
<h1 id="vPortRaiseBASEPRI"><a href="#vPortRaiseBASEPRI" class="headerlink" title="vPortRaiseBASEPRI"></a>vPortRaiseBASEPRI</h1><p>进入临界区，关闭中断</p>
<h1 id="vPortClearBASEPRIFromISR"><a href="#vPortClearBASEPRIFromISR" class="headerlink" title="vPortClearBASEPRIFromISR"></a>vPortClearBASEPRIFromISR</h1><p>开启中断</p>
<h1 id="xTaskIncrementTick"><a href="#xTaskIncrementTick" class="headerlink" title="xTaskIncrementTick"></a>xTaskIncrementTick</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BaseType_t <span class="title function_">xTaskIncrementTick</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">TCB_t * pxTCB;</span><br><span class="line">TickType_t xItemValue;</span><br><span class="line">BaseType_t xSwitchRequired = pdFALSE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Called by the portable layer each time a tick interrupt occurs.</span></span><br><span class="line"><span class="comment">	Increments the tick then checks to see if the new tick value will cause any</span></span><br><span class="line"><span class="comment">	tasks to be unblocked. */</span></span><br><span class="line">	traceTASK_INCREMENT_TICK( xTickCount );</span><br><span class="line">	<span class="keyword">if</span>( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* Minor optimisation.  The tick count cannot change in this</span></span><br><span class="line"><span class="comment">		block. */</span></span><br><span class="line">		<span class="type">const</span> TickType_t xConstTickCount = xTickCount + ( TickType_t ) <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Increment the RTOS tick, switching the delayed and overflowed</span></span><br><span class="line"><span class="comment">		delayed lists if it wraps to 0. */</span></span><br><span class="line">		xTickCount = xConstTickCount;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>( xConstTickCount == ( TickType_t ) <span class="number">0U</span> ) <span class="comment">/*lint !e774 &#x27;if&#x27; does not always evaluate to false as it is looking for an overflow. */</span></span><br><span class="line">		&#123;</span><br><span class="line">			taskSWITCH_DELAYED_LISTS();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			mtCOVERAGE_TEST_MARKER();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* See if this tick has made a timeout expire.  Tasks are stored in</span></span><br><span class="line"><span class="comment">		the	queue in the order of their wake time - meaning once one task</span></span><br><span class="line"><span class="comment">		has been found whose block time has not expired there is no need to</span></span><br><span class="line"><span class="comment">		look any further down the list. */</span></span><br><span class="line">		<span class="keyword">if</span>( xConstTickCount &gt;= xNextTaskUnblockTime )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>( ;; )</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">/* The delayed list is empty.  Set xNextTaskUnblockTime</span></span><br><span class="line"><span class="comment">					to the maximum possible value so it is extremely</span></span><br><span class="line"><span class="comment">					unlikely that the</span></span><br><span class="line"><span class="comment">					if( xTickCount &gt;= xNextTaskUnblockTime ) test will pass</span></span><br><span class="line"><span class="comment">					next time through. */</span></span><br><span class="line">					xNextTaskUnblockTime = portMAX_DELAY; <span class="comment">/*lint !e961 MISRA exception as the casts are only redundant for some ports. */</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">/* The delayed list is not empty, get the value of the</span></span><br><span class="line"><span class="comment">					item at the head of the delayed list.  This is the time</span></span><br><span class="line"><span class="comment">					at which the task at the head of the delayed list must</span></span><br><span class="line"><span class="comment">					be removed from the Blocked state. */</span></span><br><span class="line">					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); <span class="comment">/*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */</span></span><br><span class="line">					xItemValue = listGET_LIST_ITEM_VALUE( &amp;( pxTCB-&gt;xStateListItem ) );</span><br><span class="line"></span><br><span class="line">					<span class="keyword">if</span>( xConstTickCount &lt; xItemValue )</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="comment">/* It is not time to unblock this item yet, but the</span></span><br><span class="line"><span class="comment">						item value is the time at which the task at the head</span></span><br><span class="line"><span class="comment">						of the blocked list must be removed from the Blocked</span></span><br><span class="line"><span class="comment">						state -	so record the item value in</span></span><br><span class="line"><span class="comment">						xNextTaskUnblockTime. */</span></span><br><span class="line">						xNextTaskUnblockTime = xItemValue;</span><br><span class="line">						<span class="keyword">break</span>; <span class="comment">/*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */</span></span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						mtCOVERAGE_TEST_MARKER();</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="comment">/* It is time to remove the item from the Blocked state. */</span></span><br><span class="line">					( <span class="type">void</span> ) uxListRemove( &amp;( pxTCB-&gt;xStateListItem ) );</span><br><span class="line"></span><br><span class="line">					<span class="comment">/* Is the task waiting on an event also?  If so remove</span></span><br><span class="line"><span class="comment">					it from the event list. */</span></span><br><span class="line">					<span class="keyword">if</span>( listLIST_ITEM_CONTAINER( &amp;( pxTCB-&gt;xEventListItem ) ) != <span class="literal">NULL</span> )</span><br><span class="line">					&#123;</span><br><span class="line">						( <span class="type">void</span> ) uxListRemove( &amp;( pxTCB-&gt;xEventListItem ) );</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span></span><br><span class="line">					&#123;</span><br><span class="line">						mtCOVERAGE_TEST_MARKER();</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">					<span class="comment">/* Place the unblocked task into the appropriate ready</span></span><br><span class="line"><span class="comment">					list. */</span></span><br><span class="line">					prvAddTaskToReadyList( pxTCB );</span><br><span class="line"></span><br><span class="line">					<span class="comment">/* A task being unblocked cannot cause an immediate</span></span><br><span class="line"><span class="comment">					context switch if preemption is turned off. */</span></span><br><span class="line">					<span class="meta">#<span class="keyword">if</span> (  configUSE_PREEMPTION == 1 )</span></span><br><span class="line">					&#123;</span><br><span class="line">						<span class="comment">/* Preemption is on, but a context switch should</span></span><br><span class="line"><span class="comment">						only be performed if the unblocked task has a</span></span><br><span class="line"><span class="comment">						priority that is equal to or higher than the</span></span><br><span class="line"><span class="comment">						currently executing task. */</span></span><br><span class="line">						<span class="keyword">if</span>( pxTCB-&gt;uxPriority &gt;= pxCurrentTCB-&gt;uxPriority )</span><br><span class="line">						&#123;</span><br><span class="line">							xSwitchRequired = pdTRUE;</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span></span><br><span class="line">						&#123;</span><br><span class="line">							mtCOVERAGE_TEST_MARKER();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configUSE_PREEMPTION */</span></span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Tasks of equal priority to the currently running task will share</span></span><br><span class="line"><span class="comment">		processing time (time slice) if preemption is on, and the application</span></span><br><span class="line"><span class="comment">		writer has not explicitly turned time slicing off. */</span></span><br><span class="line">		<span class="meta">#<span class="keyword">if</span> ( ( configUSE_PREEMPTION == 1 ) &amp;&amp; ( configUSE_TIME_SLICING == 1 ) )</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>( listCURRENT_LIST_LENGTH( &amp;( pxReadyTasksLists[ pxCurrentTCB-&gt;uxPriority ] ) ) &gt; ( UBaseType_t ) <span class="number">1</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				xSwitchRequired = pdTRUE;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				mtCOVERAGE_TEST_MARKER();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* ( ( configUSE_PREEMPTION == 1 ) &amp;&amp; ( configUSE_TIME_SLICING == 1 ) ) */</span></span></span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">if</span> ( configUSE_TICK_HOOK == 1 )</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* Guard against the tick hook being called when the pended tick</span></span><br><span class="line"><span class="comment">			count is being unwound (when the scheduler is being unlocked). */</span></span><br><span class="line">			<span class="keyword">if</span>( xPendedTicks == ( TickType_t ) <span class="number">0</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				vApplicationTickHook();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				mtCOVERAGE_TEST_MARKER();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configUSE_TICK_HOOK */</span></span></span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">if</span> ( configUSE_PREEMPTION == 1 )</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>( xYieldPending != pdFALSE )</span><br><span class="line">			&#123;</span><br><span class="line">				xSwitchRequired = pdTRUE;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				mtCOVERAGE_TEST_MARKER();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configUSE_PREEMPTION */</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		++xPendedTicks;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* The tick hook gets called at regular intervals, even if the</span></span><br><span class="line"><span class="comment">		scheduler is locked. */</span></span><br><span class="line">		<span class="meta">#<span class="keyword">if</span> ( configUSE_TICK_HOOK == 1 )</span></span><br><span class="line">    &#123;</span><br><span class="line">			vApplicationTickHook();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> xSwitchRequired;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数做了以下几件事情：</p>
<ol>
<li>检查延时列表中的任务等待时间是否已到，如果到了，就恢复任务到就绪列表</li>
<li>当时间片开启时，且换相同优先级任务，当然，不是在这个函数里面切换，这个函数只是通过返回值告诉调用者是否要切换</li>
</ol>
<p>判断延时列表是否已经超时时，要判断tick的溢出情况，溢出了要做进一步除了，以后深入分析该过程。</p>
<p>除了systick定时器会切换线程外，其他操作比如任务阻塞、延时等也会造成任务切换。</p>
<p><em>未完待续……</em></p>
<blockquote>
<p>如有错误，欢迎指出！<br>如需转载，请注明出处~<br>email:<a href="mailto:&#x63;&#114;&#101;&#x61;&#116;&#x69;&#x76;&#x65;&#46;&#x77;&#x6f;&#114;&#x6b;&#46;&#103;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#x63;&#114;&#101;&#x61;&#116;&#x69;&#x76;&#x65;&#46;&#x77;&#x6f;&#114;&#x6b;&#46;&#103;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;</a><br>欢迎交流学习！</p>
</blockquote>
]]></content>
      <categories>
        <category>rtos</category>
        <category>sheduler context switch</category>
      </categories>
      <tags>
        <tag>rtos</tag>
      </tags>
  </entry>
  <entry>
    <title>freeRTOS-任务创建过程分析</title>
    <url>/2022/09/12/freeRTOS-%E4%BB%BB%E5%8A%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="xTaskCreate"><a href="#xTaskCreate" class="headerlink" title="xTaskCreate"></a>xTaskCreate</h1><span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BaseType_t <span class="title function_">xTaskCreate</span><span class="params">(	TaskFunction_t pxTaskCode,</span></span><br><span class="line"><span class="params">                        <span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> pcName,</span></span><br><span class="line"><span class="params">                        <span class="type">const</span> <span class="type">uint16_t</span> usStackDepth,</span></span><br><span class="line"><span class="params">                        <span class="type">void</span> * <span class="type">const</span> pvParameters,</span></span><br><span class="line"><span class="params">                        UBaseType_t uxPriority,</span></span><br><span class="line"><span class="params">                        TaskHandle_t * <span class="type">const</span> pxCreatedTask )</span> <span class="comment">/*lint !e971 Unqualified char types are allowed for strings and single characters only. */</span></span><br><span class="line">&#123;</span><br><span class="line">TCB_t *pxNewTCB;</span><br><span class="line">BaseType_t xReturn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If the stack grows down then allocate the stack then the TCB so the stack</span></span><br><span class="line"><span class="comment">    does not grow into the TCB.  Likewise if the stack grows up then allocate</span></span><br><span class="line"><span class="comment">    the TCB then the stack. */</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span>( portSTACK_GROWTH &gt; 0 )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Allocate space for the TCB.  Where the memory comes from depends on</span></span><br><span class="line"><span class="comment">        the implementation of the port malloc function and whether or not static</span></span><br><span class="line"><span class="comment">        allocation is being used. */</span></span><br><span class="line">        pxNewTCB = ( TCB_t * ) pvPortMalloc( <span class="keyword">sizeof</span>( TCB_t ) );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( pxNewTCB != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Allocate space for the stack used by the task being created.</span></span><br><span class="line"><span class="comment">            The base of the stack memory stored in the TCB so the task can</span></span><br><span class="line"><span class="comment">            be deleted later if required. */</span></span><br><span class="line">            pxNewTCB-&gt;pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( <span class="type">size_t</span> ) usStackDepth ) * <span class="keyword">sizeof</span>( StackType_t ) ) ); <span class="comment">/*lint !e961 MISRA exception as the casts are only redundant for some ports. */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( pxNewTCB-&gt;pxStack == <span class="literal">NULL</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* Could not allocate the stack.  Delete the allocated TCB. */</span></span><br><span class="line">                vPortFree( pxNewTCB );</span><br><span class="line">                pxNewTCB = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line">    &#123;</span><br><span class="line">    StackType_t *pxStack;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Allocate space for the stack used by the task being created. */</span></span><br><span class="line">        pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( <span class="type">size_t</span> ) usStackDepth ) * <span class="keyword">sizeof</span>( StackType_t ) ) ); <span class="comment">/*lint !e961 MISRA exception as the casts are only redundant for some ports. */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( pxStack != <span class="literal">NULL</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Allocate space for the TCB. */</span></span><br><span class="line">            pxNewTCB = ( TCB_t * ) pvPortMalloc( <span class="keyword">sizeof</span>( TCB_t ) ); <span class="comment">/*lint !e961 MISRA exception as the casts are only redundant for some paths. */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( pxNewTCB != <span class="literal">NULL</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* Store the stack location in the TCB. */</span></span><br><span class="line">                pxNewTCB-&gt;pxStack = pxStack;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/* The stack cannot be used as the TCB was not created.  Free</span></span><br><span class="line"><span class="comment">                it again. */</span></span><br><span class="line">                vPortFree( pxStack );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pxNewTCB = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( pxNewTCB != <span class="literal">NULL</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">if</span>( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* Tasks can be created statically or dynamically, so note this</span></span><br><span class="line"><span class="comment">            task was created dynamically in case it is later deleted. */</span></span><br><span class="line">            pxNewTCB-&gt;ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configSUPPORT_STATIC_ALLOCATION */</span></span></span><br><span class="line"></span><br><span class="line">        prvInitialiseNewTask( pxTaskCode, pcName, ( <span class="type">uint32_t</span> ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, <span class="literal">NULL</span> );</span><br><span class="line">        prvAddNewTaskToReadyList( pxNewTCB );</span><br><span class="line">        xReturn = pdPASS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xReturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个函数主要做了以下事情：</p>
<ol>
<li>根据栈的生长方向，来确定TCB和stack的申请先后顺序，这样做的目的是什么呢？</li>
<li>调用 <code>prvInitialiseNewTask</code>函数初始化TCB和stack</li>
<li>调用 <code>prvAddNewTaskToReadyList</code>函数，将任务挂载到就緒列表上</li>
</ol>
<p>接下来看看函數 <code>prvInitialiseNewTask</code>做了什么。</p>
<h1 id="prvInitialiseNewTask"><a href="#prvInitialiseNewTask" class="headerlink" title="prvInitialiseNewTask"></a>prvInitialiseNewTask</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">prvInitialiseNewTask</span><span class="params">( 	TaskFunction_t pxTaskCode,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> <span class="type">char</span> * <span class="type">const</span> pcName,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> <span class="type">uint32_t</span> ulStackDepth,</span></span><br><span class="line"><span class="params">									<span class="type">void</span> * <span class="type">const</span> pvParameters,</span></span><br><span class="line"><span class="params">									UBaseType_t uxPriority,</span></span><br><span class="line"><span class="params">									TaskHandle_t * <span class="type">const</span> pxCreatedTask,</span></span><br><span class="line"><span class="params">									TCB_t *pxNewTCB,</span></span><br><span class="line"><span class="params">									<span class="type">const</span> MemoryRegion_t * <span class="type">const</span> xRegions )</span> <span class="comment">/*lint !e971 Unqualified char types are allowed for strings and single characters only. */</span></span><br><span class="line">&#123;</span><br><span class="line">StackType_t *pxTopOfStack;</span><br><span class="line">UBaseType_t x;</span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span>( portUSING_MPU_WRAPPERS == 1 )</span></span><br><span class="line">		<span class="comment">/* Should the task be created in privileged mode? */</span></span><br><span class="line">		BaseType_t xRunPrivileged;</span><br><span class="line">		<span class="keyword">if</span>( ( uxPriority &amp; portPRIVILEGE_BIT ) != <span class="number">0U</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			xRunPrivileged = pdTRUE;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			xRunPrivileged = pdFALSE;</span><br><span class="line">		&#125;</span><br><span class="line">		uxPriority &amp;= ~portPRIVILEGE_BIT;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* portUSING_MPU_WRAPPERS == 1 */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Avoid dependency on memset() if it is not required. */</span></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span>( ( configCHECK_FOR_STACK_OVERFLOW &gt; 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* Fill the stack with a known value to assist debugging. */</span></span><br><span class="line">		( <span class="type">void</span> ) <span class="built_in">memset</span>( pxNewTCB-&gt;pxStack, ( <span class="type">int</span> ) tskSTACK_FILL_BYTE, ( <span class="type">size_t</span> ) ulStackDepth * <span class="keyword">sizeof</span>( StackType_t ) );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* ( ( configCHECK_FOR_STACK_OVERFLOW &gt; 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Calculate the top of stack address.  This depends on whether the stack</span></span><br><span class="line"><span class="comment">	grows from high memory to low (as per the 80x86) or vice versa.</span></span><br><span class="line"><span class="comment">	portSTACK_GROWTH is used to make the result positive or negative as required</span></span><br><span class="line"><span class="comment">	by the port. */</span></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span>( portSTACK_GROWTH &lt; 0 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxTopOfStack = pxNewTCB-&gt;pxStack + ( ulStackDepth - ( <span class="type">uint32_t</span> ) <span class="number">1</span> );</span><br><span class="line">		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) &amp; ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); <span class="comment">/*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Check the alignment of the calculated top of stack is correct. */</span></span><br><span class="line">		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack &amp; ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == <span class="number">0UL</span> ) );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">else</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line">	&#123;</span><br><span class="line">		pxTopOfStack = pxNewTCB-&gt;pxStack;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Check the alignment of the stack buffer is correct. */</span></span><br><span class="line">		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB-&gt;pxStack &amp; ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == <span class="number">0UL</span> ) );</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* The other extreme of the stack space is required if stack checking is</span></span><br><span class="line"><span class="comment">		performed. */</span></span><br><span class="line">		pxNewTCB-&gt;pxEndOfStack = pxNewTCB-&gt;pxStack + ( ulStackDepth - ( <span class="type">uint32_t</span> ) <span class="number">1</span> );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Store the task name in the TCB. */</span></span><br><span class="line">	<span class="keyword">for</span>( x = ( UBaseType_t ) <span class="number">0</span>; x &lt; ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )</span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;pcTaskName[ x ] = pcName[ x ];</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Don&#x27;t copy all configMAX_TASK_NAME_LEN if the string is shorter than</span></span><br><span class="line"><span class="comment">		configMAX_TASK_NAME_LEN characters just in case the memory after the</span></span><br><span class="line"><span class="comment">		string is not accessible (extremely unlikely). */</span></span><br><span class="line">		<span class="keyword">if</span>( pcName[ x ] == <span class="number">0x00</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			mtCOVERAGE_TEST_MARKER();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Ensure the name string is terminated in the case that the string length</span></span><br><span class="line"><span class="comment">	was greater or equal to configMAX_TASK_NAME_LEN. */</span></span><br><span class="line">	pxNewTCB-&gt;pcTaskName[ configMAX_TASK_NAME_LEN - <span class="number">1</span> ] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* This is used as an array index so must ensure it&#x27;s not too large.  First</span></span><br><span class="line"><span class="comment">	remove the privilege bit if one is present. */</span></span><br><span class="line">	<span class="keyword">if</span>( uxPriority &gt;= ( UBaseType_t ) configMAX_PRIORITIES )</span><br><span class="line">	&#123;</span><br><span class="line">		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) <span class="number">1U</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		mtCOVERAGE_TEST_MARKER();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pxNewTCB-&gt;uxPriority = uxPriority;</span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> ( configUSE_MUTEXES == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;uxBasePriority = uxPriority;</span><br><span class="line">		pxNewTCB-&gt;uxMutexesHeld = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configUSE_MUTEXES */</span></span></span><br><span class="line"></span><br><span class="line">	vListInitialiseItem( &amp;( pxNewTCB-&gt;xStateListItem ) );</span><br><span class="line">	vListInitialiseItem( &amp;( pxNewTCB-&gt;xEventListItem ) );</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get</span></span><br><span class="line"><span class="comment">	back to	the containing TCB from a generic item in a list. */</span></span><br><span class="line">	listSET_LIST_ITEM_OWNER( &amp;( pxNewTCB-&gt;xStateListItem ), pxNewTCB );</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Event lists are always in priority order. */</span></span><br><span class="line">	listSET_LIST_ITEM_VALUE( &amp;( pxNewTCB-&gt;xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); <span class="comment">/*lint !e961 MISRA exception as the casts are only redundant for some ports. */</span></span><br><span class="line">	listSET_LIST_ITEM_OWNER( &amp;( pxNewTCB-&gt;xEventListItem ), pxNewTCB );</span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> ( portCRITICAL_NESTING_IN_TCB == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;uxCriticalNesting = ( UBaseType_t ) <span class="number">0U</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* portCRITICAL_NESTING_IN_TCB */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> ( configUSE_APPLICATION_TASK_TAG == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;pxTaskTag = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configUSE_APPLICATION_TASK_TAG */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> ( configGENERATE_RUN_TIME_STATS == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;ulRunTimeCounter = <span class="number">0UL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configGENERATE_RUN_TIME_STATS */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> ( portUSING_MPU_WRAPPERS == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		vPortStoreTaskMPUSettings( &amp;( pxNewTCB-&gt;xMPUSettings ), xRegions, pxNewTCB-&gt;pxStack, ulStackDepth );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* Avoid compiler warning about unreferenced parameter. */</span></span><br><span class="line">		( <span class="type">void</span> ) xRegions;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span>( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>( x = <span class="number">0</span>; x &lt; ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )</span><br><span class="line">		&#123;</span><br><span class="line">			pxNewTCB-&gt;pvThreadLocalStoragePointers[ x ] = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> ( configUSE_TASK_NOTIFICATIONS == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;ulNotifiedValue = <span class="number">0</span>;</span><br><span class="line">		pxNewTCB-&gt;ucNotifyState = taskNOT_WAITING_NOTIFICATION;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> ( configUSE_NEWLIB_REENTRANT == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* Initialise this task&#x27;s Newlib reent structure. */</span></span><br><span class="line">		_REENT_INIT_PTR( ( &amp;( pxNewTCB-&gt;xNewLib_reent ) ) );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span>( INCLUDE_xTaskAbortDelay == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;ucDelayAborted = pdFALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Initialize the TCB stack to look as if the task was already running,</span></span><br><span class="line"><span class="comment">	but had been interrupted by the scheduler.  The return address is set</span></span><br><span class="line"><span class="comment">	to the start of the task function. Once the stack has been initialised</span></span><br><span class="line"><span class="comment">	the	top of stack variable is updated. */</span></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span>( portUSING_MPU_WRAPPERS == 1 )</span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">else</span> <span class="comment">/* portUSING_MPU_WRAPPERS */</span></span></span><br><span class="line">	&#123;</span><br><span class="line">		pxNewTCB-&gt;pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* portUSING_MPU_WRAPPERS */</span></span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>( ( <span class="type">void</span> * ) pxCreatedTask != <span class="literal">NULL</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* Pass the handle out in an anonymous way.  The handle can be used to</span></span><br><span class="line"><span class="comment">		change the created task&#x27;s priority, delete the created task, etc.*/</span></span><br><span class="line">		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		mtCOVERAGE_TEST_MARKER();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>根据栈的生长方向来初始化栈顶指针 <code>pxTopOfStack</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span>( portSTACK_GROWTH &lt; 0 )</span></span><br><span class="line">&#123;</span><br><span class="line">    pxTopOfStack = pxNewTCB-&gt;pxStack + ( ulStackDepth - ( <span class="type">uint32_t</span> ) <span class="number">1</span> );</span><br><span class="line">    pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) &amp; ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); <span class="comment">/*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check the alignment of the calculated top of stack is correct. */</span></span><br><span class="line">    configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack &amp; ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == <span class="number">0UL</span> ) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br><span class="line">&#123;</span><br><span class="line">    pxTopOfStack = pxNewTCB-&gt;pxStack;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Check the alignment of the stack buffer is correct. */</span></span><br><span class="line">    configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB-&gt;pxStack &amp; ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == <span class="number">0UL</span> ) );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The other extreme of the stack space is required if stack checking is</span></span><br><span class="line"><span class="comment">    performed. */</span></span><br><span class="line">    pxNewTCB-&gt;pxEndOfStack = pxNewTCB-&gt;pxStack + ( ulStackDepth - ( <span class="type">uint32_t</span> ) <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* portSTACK_GROWTH */</span></span></span><br></pre></td></tr></table></figure>

<p>向下生长时，将 <code>pxTopOfStack</code>指向最高地址，并且要字节对齐，目的是提高数据访问效率；向上生长时，将 <code>pxTopOfStack</code>指向最低地址，同样要字节对齐<br>2. 将任务名存入TCB，如果过长的话，做截断处理<br>3. 处理优先级，便于插入链表时，做排序，以及优先级反转的时候保存原来的优先级<br>4. 初始化状态链表项 <code>xStateListItem</code>和事件链表项 <code>xStateListItem</code><br>5. 初始化链表的所有者，将 <code>xStateListItem</code>和 <code>xEventListItem</code>指向TCB首地址<br>6. 将优先级写入 <code>xEventListItem</code>中<br>7. 调用 <code>pxPortInitialiseStack</code>初始化stack</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> portINITIAL_XPSR			( 0x01000000 )</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> portSTART_ADDRESS_MASK				( ( StackType_t ) 0xfffffffeUL )</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">prvTaskExitError</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* A function that implements a task must not exit or attempt to return to</span></span><br><span class="line"><span class="comment">	its caller as there is nothing to return to.  If a task wants to exit it</span></span><br><span class="line"><span class="comment">	should instead call vTaskDelete( NULL ).</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Artificially force an assert() to be triggered if configASSERT() is</span></span><br><span class="line"><span class="comment">	defined, then stop here so application writers can catch the error. */</span></span><br><span class="line">	configASSERT( uxCriticalNesting == ~<span class="number">0UL</span> );</span><br><span class="line">	portDISABLE_INTERRUPTS();</span><br><span class="line">	<span class="keyword">for</span>( ;; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*CM3版本*/</span></span><br><span class="line">StackType_t *<span class="title function_">pxPortInitialiseStack</span><span class="params">( StackType_t *pxTopOfStack, TaskFunction_t pxCode, <span class="type">void</span> *pvParameters )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* Simulate the stack frame as it would be created by a context switch</span></span><br><span class="line"><span class="comment">	interrupt. */</span></span><br><span class="line">	pxTopOfStack--; <span class="comment">/* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */</span></span><br><span class="line">	*pxTopOfStack = portINITIAL_XPSR;	<span class="comment">/* xPSR */</span></span><br><span class="line">	pxTopOfStack--;</span><br><span class="line">	*pxTopOfStack = ( ( StackType_t ) pxCode ) &amp; portSTART_ADDRESS_MASK;	<span class="comment">/* PC */</span></span><br><span class="line">	pxTopOfStack--;</span><br><span class="line">	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	<span class="comment">/* LR */</span></span><br><span class="line"></span><br><span class="line">	pxTopOfStack -= <span class="number">5</span>;	<span class="comment">/* R12, R3, R2 and R1. */</span></span><br><span class="line">	*pxTopOfStack = ( StackType_t ) pvParameters;	<span class="comment">/* R0 */</span></span><br><span class="line">	pxTopOfStack -= <span class="number">8</span>;	<span class="comment">/* R11, R10, R9, R8, R7, R6, R5 and R4. */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pxTopOfStack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*CM4版本*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> portINITIAL_EXEC_RETURN		( 0xfffffffd )</span></span><br><span class="line"></span><br><span class="line">StackType_t *<span class="title function_">pxPortInitialiseStack</span><span class="params">( StackType_t *pxTopOfStack, TaskFunction_t pxCode, <span class="type">void</span> *pvParameters )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* Simulate the stack frame as it would be created by a context switch</span></span><br><span class="line"><span class="comment">	interrupt. */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Offset added to account for the way the MCU uses the stack on entry/exit</span></span><br><span class="line"><span class="comment">	of interrupts, and to ensure alignment. */</span></span><br><span class="line">	pxTopOfStack--;</span><br><span class="line"></span><br><span class="line">	*pxTopOfStack = portINITIAL_XPSR;	<span class="comment">/* xPSR */</span></span><br><span class="line">	pxTopOfStack--;</span><br><span class="line">	*pxTopOfStack = ( ( StackType_t ) pxCode ) &amp; portSTART_ADDRESS_MASK;	<span class="comment">/* PC */</span></span><br><span class="line">	pxTopOfStack--;</span><br><span class="line">	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	<span class="comment">/* LR */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Save code space by skipping register initialisation. */</span></span><br><span class="line">	pxTopOfStack -= <span class="number">5</span>;	<span class="comment">/* R12, R3, R2 and R1. */</span></span><br><span class="line">	*pxTopOfStack = ( StackType_t ) pvParameters;	<span class="comment">/* R0 */</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* A save method is being used that requires each task to maintain its</span></span><br><span class="line"><span class="comment">	own exec return value. */</span></span><br><span class="line">	pxTopOfStack--;</span><br><span class="line">	*pxTopOfStack = portINITIAL_EXEC_RETURN;</span><br><span class="line"></span><br><span class="line">	pxTopOfStack -= <span class="number">8</span>;	<span class="comment">/* R11, R10, R9, R8, R7, R6, R5 and R4. */</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pxTopOfStack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>为什么 <code>portINITIAL_XPSR</code>的值为 <code>0x01000000</code>呢？<br>将xPSR寄存器的第24位置一，使cpu执行用户任务时，使用 <code>Thumb</code>指令，而非 <code>ARM</code>指令，执行 <code>ARM</code>就会出错，因为CM3&#x2F;4不支持 <code>ARM指令</code></li>
<li>将 <code>pxCode</code>(用户代码首地址)和 <code>0xfffffffeUL</code>进行按位与，也就是将LSB置为0，因为PC指针的指令地址必须对齐到半字或字地址，这个操作会不会产生问题？GOD! 把代码地址都改变了？实际上不会，想想为什么吧。</li>
<li><code>prvTaskExitError</code>函数先关闭中断，然后进入无限循环</li>
<li>将 <code>R0</code>指向 <code>pvParameters</code><br>为什么要以这样的方式初始化栈，因为做线程切换的时候，寄存器的保持顺序是：<code>xPSR</code>, <code>PC</code>, <code>LR</code>, <code>R12</code>, <code>R3-R0</code>(<code>caller-saved register</code>), 然后是 <code>R11, R10, R9, R8, R7, R6, R5 and R4</code>,这几个寄存器是 <code>callee-saved register</code>。所以当该任务获取到cpu使用权时，以上参数将被填入cpu内部寄存器中。<br>所以一些 <code>caller-saved register</code>保持空缺的原因是，还没运行过，根本就没有参数可以保存嘛，当然，不能忽视的是，<code>pvParameters</code>要传入到R0，因为参数的传递过程就是由 <code>R0-R3</code>实现的，当函数A调用函数B时，需要传递参数，则要将参数先复制到这几个寄存器中，然后再跳转到B执行。如果传递的参数大于4个怎么办，就要通过<strong>栈帧</strong>传递了，把前四个参数复制到 <code>R0-R3</code>中，把剩余参数放在stack中，这就是为什么参数的传递尽量使用指针和引用的原因了，当然也不绝对，只要减少复制过程就能提高运行速度，所以，结论是：大数据的传递使用指针，小数据传递，使用值传递。</li>
<li><code>portINITIAL_EXEC_RETURN</code>用于在退出 <code>SVC</code>和 <code>PendSV</code>时，使用线程栈。发现，在CM3版本中，并没有这一步，具体原因待查。</li>
</ol>
<p>再看看 <code>prvAddNewTaskToReadyList</code>函数的执行过程：</p>
<h1 id="prvAddNewTaskToReadyList"><a href="#prvAddNewTaskToReadyList" class="headerlink" title="prvAddNewTaskToReadyList"></a>prvAddNewTaskToReadyList</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">prvAddNewTaskToReadyList</span><span class="params">( TCB_t *pxNewTCB )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/* Ensure interrupts don&#x27;t access the task lists while the lists are being</span></span><br><span class="line"><span class="comment">	updated. */</span></span><br><span class="line">	taskENTER_CRITICAL();</span><br><span class="line">	&#123;</span><br><span class="line">		uxCurrentNumberOfTasks++;</span><br><span class="line">		<span class="keyword">if</span>( pxCurrentTCB == <span class="literal">NULL</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* There are no other tasks, or all the other tasks are in</span></span><br><span class="line"><span class="comment">			the suspended state - make this the current task. */</span></span><br><span class="line">			pxCurrentTCB = pxNewTCB;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>( uxCurrentNumberOfTasks == ( UBaseType_t ) <span class="number">1</span> )</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">/* This is the first task to be created so do the preliminary</span></span><br><span class="line"><span class="comment">				initialisation required.  We will not recover if this call</span></span><br><span class="line"><span class="comment">				fails, but we will report the failure. */</span></span><br><span class="line">				prvInitialiseTaskLists();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				mtCOVERAGE_TEST_MARKER();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* If the scheduler is not already running, make this task the</span></span><br><span class="line"><span class="comment">			current task if it is the highest priority task to be created</span></span><br><span class="line"><span class="comment">			so far. */</span></span><br><span class="line">			<span class="keyword">if</span>( xSchedulerRunning == pdFALSE )</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>( pxCurrentTCB-&gt;uxPriority &lt;= pxNewTCB-&gt;uxPriority )</span><br><span class="line">				&#123;</span><br><span class="line">					pxCurrentTCB = pxNewTCB;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					mtCOVERAGE_TEST_MARKER();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				mtCOVERAGE_TEST_MARKER();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		uxTaskNumber++;</span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">if</span> ( configUSE_TRACE_FACILITY == 1 )</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/* Add a counter into the TCB for tracing only. */</span></span><br><span class="line">			pxNewTCB-&gt;uxTCBNumber = uxTaskNumber;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="meta">#<span class="keyword">endif</span> <span class="comment">/* configUSE_TRACE_FACILITY */</span></span></span><br><span class="line">		traceTASK_CREATE( pxNewTCB );</span><br><span class="line"></span><br><span class="line">		prvAddTaskToReadyList( pxNewTCB );</span><br><span class="line"></span><br><span class="line">		portSETUP_TCB( pxNewTCB );</span><br><span class="line">	&#125;</span><br><span class="line">	taskEXIT_CRITICAL();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>( xSchedulerRunning != pdFALSE )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">/* If the created task is of a higher priority than the current task</span></span><br><span class="line"><span class="comment">		then it should run now. */</span></span><br><span class="line">		<span class="keyword">if</span>( pxCurrentTCB-&gt;uxPriority &lt; pxNewTCB-&gt;uxPriority )</span><br><span class="line">		&#123;</span><br><span class="line">			taskYIELD_IF_USING_PREEMPTION();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			mtCOVERAGE_TEST_MARKER();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		mtCOVERAGE_TEST_MARKER();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>进来第一件事情就是关掉中断，独享的moment不能让别人打扰，不然就会出错</li>
<li>将当前存在的任务数加一</li>
<li>如果 <code>pxCurrentTCB</code>为 <code>NULL</code>，表明这是系统启动后的第一个任务，要先初始化链表，稍后讲。</li>
<li>如果 <code>pxCurrentTCB</code>不为 <code>NULL</code>，并且調度器未开启，则将当前任务指针指向该任务。</li>
<li>将任务插入到就绪链表的末端。</li>
</ol>
<p>怎么选出优先级最高的任务呢？使用硬件实现，叫做前导零算法，使用 <code>__clz</code>指令。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Place the task represented by pxTCB into the appropriate ready list for</span></span><br><span class="line"><span class="comment"> * the task.  It is inserted at the end of the list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> prvAddTaskToReadyList( pxTCB )																\</span></span><br><span class="line"><span class="meta">	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\</span></span><br><span class="line"><span class="meta">	taskRECORD_READY_PRIORITY( ( pxTCB )-&gt;uxPriority );												\</span></span><br><span class="line"><span class="meta">	vListInsertEnd( &amp;( pxReadyTasksLists[ ( pxTCB )-&gt;uxPriority ] ), &amp;( ( pxTCB )-&gt;xStateListItem ) ); \</span></span><br><span class="line"><span class="meta">	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )</span></span><br></pre></td></tr></table></figure>

<p><code>taskRECORD_READY_PRIORITY</code>将所有的线程中，最高的优先级赋给 <code>uxTopReadyPriority</code>，有两种不同的实现，以下为其中一种：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> taskRECORD_READY_PRIORITY( uxPriority )														\</span></span><br><span class="line"><span class="meta">&#123;																									\</span></span><br><span class="line"><span class="meta">	<span class="keyword">if</span>( ( uxPriority ) &gt; uxTopReadyPriority )														\</span></span><br><span class="line"><span class="meta">	&#123;																								\</span></span><br><span class="line"><span class="meta">		uxTopReadyPriority = ( uxPriority );														\</span></span><br><span class="line"><span class="meta">	&#125;																								\</span></span><br><span class="line"><span class="meta">&#125; <span class="comment">/* taskRECORD_READY_PRIORITY */</span></span></span><br></pre></td></tr></table></figure>

<p>然后将 <code>TCB</code>插入到优先级对应的就绪列表的尾部，就绪列表按照优先级划分为多个，具有相同的优先级任务挂在同一个就绪列表中。</p>
<ol start="6">
<li>开启中断</li>
<li>是否要进行线程切换，切换就使用：<code>taskYIELD_IF_USING_PREEMPTION</code>，该宏最终会调用到 <code>portYIELD</code>，可以看出，更高优先级的任务一创建就会<strong>马上夺取</strong>cpu的使用权</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> portYIELD()																\</span></span><br><span class="line"><span class="meta">&#123;																				\</span></span><br><span class="line"><span class="meta">	<span class="comment">/* Set a PendSV to request a context switch. */</span>								\</span></span><br><span class="line"><span class="meta">	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\</span></span><br><span class="line"><span class="meta">																				\</span></span><br><span class="line"><span class="meta">	<span class="comment">/* Barriers are normally not required but do ensure the code is completely	\</span></span></span><br><span class="line"><span class="comment"><span class="meta">	within the specified behaviour for the architecture. */</span>						\</span></span><br><span class="line"><span class="meta">	__dsb( portSY_FULL_READ_WRITE );											\</span></span><br><span class="line"><span class="meta">	__isb( portSY_FULL_READ_WRITE );											\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure>

<p>请求 <code>PendSV</code>中断，线程就是在这个中断中切换的。</p>
<blockquote>
<p>如有错误，欢迎指出！<br>如需转载，请注明出处~<br>email:<a href="mailto:&#x63;&#x72;&#101;&#97;&#116;&#105;&#x76;&#x65;&#x2e;&#x77;&#x6f;&#x72;&#107;&#46;&#103;&#x40;&#103;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x63;&#x72;&#101;&#97;&#116;&#105;&#x76;&#x65;&#x2e;&#x77;&#x6f;&#x72;&#107;&#46;&#103;&#x40;&#103;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#109;</a><br>欢迎交流学习！</p>
</blockquote>
]]></content>
      <categories>
        <category>rtos</category>
        <category>task create</category>
      </categories>
      <tags>
        <tag>rtos</tag>
      </tags>
  </entry>
  <entry>
    <title>linux proxy</title>
    <url>/2022/10/31/linux-proxy/</url>
    <content><![CDATA[<p>使用git等下载资源的时候，需要设置代理提高网速……</p>
<span id="more"></span>

<h1 id="Linux-让终端走代理的几种方法"><a href="#Linux-让终端走代理的几种方法" class="headerlink" title="Linux 让终端走代理的几种方法"></a>Linux 让终端走代理的几种方法</h1><p><a href="https://zhuanlan.zhihu.com/p/46973701">https://zhuanlan.zhihu.com/p/46973701</a></p>
<h1 id="Apt安装软件不更换源的方法"><a href="#Apt安装软件不更换源的方法" class="headerlink" title="Apt安装软件不更换源的方法"></a>Apt安装软件不更换源的方法</h1><p><a href="https://www.serverlab.ca/tutorials/linux/administration-linux/how-to-set-the-proxy-for-apt-for-ubuntu-18-04/">https://www.serverlab.ca/tutorials/linux/administration-linux/how-to-set-the-proxy-for-apt-for-ubuntu-18-04/</a></p>
]]></content>
  </entry>
  <entry>
    <title>reference vs pointer in cpp</title>
    <url>/2023/02/19/reference-vs-pointer-in-cpp/</url>
    <content><![CDATA[<p>compile code below:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span>&amp; num)</span> </span>&#123; <span class="keyword">return</span> num * num; &#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span>* num)</span> </span>&#123; <span class="keyword">return</span> (*num) * (*num); &#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">square</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123; <span class="keyword">return</span> num * num; &#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>and then you will get the following asm:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">square(int&amp;):</span><br><span class="line">        push    &#123;r7&#125;</span><br><span class="line">        sub     sp, sp, #12</span><br><span class="line">        add     r7, sp, #0</span><br><span class="line">        str     r0, [r7, #4]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        ldr     r3, [r3]</span><br><span class="line">        ldr     r2, [r7, #4]</span><br><span class="line">        ldr     r2, [r2]</span><br><span class="line">        mul     r3, r2, r3</span><br><span class="line">        mov     r0, r3</span><br><span class="line">        adds    r7, r7, #12</span><br><span class="line">        mov     sp, r7</span><br><span class="line">        ldr     r7, [sp], #4</span><br><span class="line">        bx      lr</span><br><span class="line">square(int*):</span><br><span class="line">        push    &#123;r7&#125;</span><br><span class="line">        sub     sp, sp, #12</span><br><span class="line">        add     r7, sp, #0</span><br><span class="line">        str     r0, [r7, #4]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        ldr     r3, [r3]</span><br><span class="line">        ldr     r2, [r7, #4]</span><br><span class="line">        ldr     r2, [r2]</span><br><span class="line">        mul     r3, r2, r3</span><br><span class="line">        mov     r0, r3</span><br><span class="line">        adds    r7, r7, #12</span><br><span class="line">        mov     sp, r7</span><br><span class="line">        ldr     r7, [sp], #4</span><br><span class="line">        bx      lr</span><br><span class="line">square(int):</span><br><span class="line">        push    &#123;r7&#125;</span><br><span class="line">        sub     sp, sp, #12</span><br><span class="line">        add     r7, sp, #0</span><br><span class="line">        str     r0, [r7, #4]</span><br><span class="line">        ldr     r3, [r7, #4]</span><br><span class="line">        mul     r3, r3, r3</span><br><span class="line">        mov     r0, r3</span><br><span class="line">        adds    r7, r7, #12</span><br><span class="line">        mov     sp, r7</span><br><span class="line">        ldr     r7, [sp], #4</span><br><span class="line">        bx      lr</span><br></pre></td></tr></table></figure>
<p>as you can see, nothing different between reference and pointer, also, note that pass a pointer or a reference is not always a good choice.</p>
]]></content>
      <categories>
        <category>c/cpp</category>
      </categories>
      <tags>
        <tag>c/cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>WISDOM</title>
    <url>/2022/09/10/wisdom/</url>
    <content><![CDATA[<ul>
<li><p>你的时间有限，所以不要为别人而活。不要被教条所限，不要活在别人的观念里。不要让别人的意见左右自己内心的声音，最重要的是，勇敢地去追随自己的心灵和直觉，只有自己的心灵和直觉才知道你自己的真实想法，其它一切都是次要。你的时间有限，所以不要为别人而活。</p>
</li>
<li><p>“记住你即将死去”是我一生中遇到的最重要箴言。它帮我指明了生命中重要的选择，因为几乎所有的事情，包括所有的荣誉、所有的骄傲、所有对难堪和失败的恐惧，这些在死亡面前都会消失，我看到的是留下的真止重要的乐西。</p>
<span id="more"></span>
</li>
<li><p>在你生命的最初30年中，你养成习惯；在你生命的最后的30年中，你的习惯决定了你。</p>
</li>
<li><p>专注和简单一直是我的秘块之一。简单可能比复杂更难做到：你必须努力理清思路，从而使其变得简单，最终这是值得的，因为一旦你做到了，便可以创造奇迹。</p>
</li>
<li><p>拥有初学者的心态是件了不起的事情，所谓初学者的心态是指，不要无端猜测、不要期望、不要武断也不要偏见，初学者的心态正如一个新生儿面对这个世界一样，永远充满好奇、求知欲、赞叹。</p>
</li>
<li><p>如果你很忙，除了你真的很重要以外，更可能的原因是：你很弱，你没有什么更好的事情去做，你生活太差不得不努力来弥补，或者你装作你很忙，让自己显得很重要。</p>
</li>
<li><p>自由从何而来？从自信来，而自信则是从自律来！先学会克制自己，用严格的日程表控制生活，才能在这种自律中不断磨练出自信：自信是对事情的控制能力，如果你连最基本的时间都做控制不了，还谈什么自信？</p>
</li>
</ul>
<p><em>from Jobs</em></p>
<hr>
<p>泡夜店、纹身、买醉，这些事情看起来很酷，其实一点难度都没有，只有你想办到随时都可以。</p>
<p>真正酷的，应该是那些不容易办到的，比如：读书、赚钱、健身、早睡早起、孝顺父母，用炙热的心爱人爱己，用你毕生的精力去战胜一个个专业领域。</p>
<p>低级的欲望放纵即可获得，<br>高级的欲望只有克制才能达成。</p>
<p><em>from 人民日报</em></p>
<hr>
<p>人这辈子千万不要马虎两件事，一是找对爱人，二是找对事业，因为太阳升起时要投身事业，太阳落山是要与爱人相拥的。我们终其一生，都在寻找两个东西，一个是价值感，一个是归属感。价值感来自于被肯定，归属感来自于被爱……</p>
<p>是的，不论你多么富有，多么有权势，当生命结束之时，所有的一切都只能留在世界上，唯有灵魂跟着你走下一段旅程。人生不是一场物质的盛宴，而是一次灵魂的修炼，使它在谢幕之时比开幕之初更为高尚。</p>
<h2 id="from-稻盛和夫"><a href="#from-稻盛和夫" class="headerlink" title="from 稻盛和夫"></a><em>from 稻盛和夫</em></h2><hr>
<p>人生的的意义是什么？提升心性，磨练灵魂。</p>
<p>为何来到这个世界？是为了在死的时候，灵魂比生的时候更纯洁一点，或者说，带着更美好、更崇高的灵魂去迎接死亡。</p>
<h2 id="from-稻盛和夫-1"><a href="#from-稻盛和夫-1" class="headerlink" title="from 稻盛和夫"></a><em>from 稻盛和夫</em></h2>]]></content>
      <categories>
        <category>zen</category>
      </categories>
      <tags>
        <tag>zen</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是企业的核心竞争力</title>
    <url>/2022/09/14/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BC%81%E4%B8%9A%E7%9A%84%E6%A0%B8%E5%BF%83%E7%AB%9E%E4%BA%89%E5%8A%9B/</url>
    <content><![CDATA[<blockquote>
<p>你有一只鹅，它每天下一只蛋。你把鹅蛋卖了，每天能赚不少钱。那么，你的鹅每天下的那只蛋，是你的核心竞争力吗？</p>
<p>当然不是。鹅蛋从来不是核心竞争力，那只鹅才是。</p>
<p>你的一个个产品，就是一只只鹅蛋。他们只是结果。它们不是核心竞争力，你为什么能做出这些产品，才是你的核心竞争力。</p>
<p>比如，你有一个打磨了无数次的做产品的独特流程？你创造了一种员工极度负责、眼睛里容不下一个bug的文化？你有一支投入了5年，一直研究底层技术的团队？你的设计师团队，每年去20个国家采风？</p>
<p>这些才是你的核心竞争力，是这些东西，让你源源不断下蛋，产生新产品。</p>
<p>找到这些东西，然后把它们提炼出来，当做珍宝一样保护起来，不断的训练它们，直到别人无法超越，然后复制到每件产品上去。</p>
<p><em>刘润</em></p>
</blockquote>
<p>很多科技型公司并不重视技术，他们只重视技术带来的产品，产品带来的利润。</p>
<p>企业作终是要盈利的，不盈利就存不下去，这个逻辑看似没错，但是存在严重的问题。</p>
<p>假如你去购买一个彩电，你大概不希望彩电里的电路板上全是灰尘，导线全部搅在一起，乱七八糟，有时候电视剧播放得好好的，屏幕突然不亮了，你不得不用大力金刚掌拍一下电视机，把画面拍出来……</p>
<p>公司研发一款产品，不能只看产品的样貌，更重要的是产品背后的技术。如果研发产品时走的是“野路子”，后期维护起来可能相当麻烦。产品最多也只能算是”金玉其外，败絮其中“。</p>
<p>看得见的是产品的外观、触感、重量，看不见的是其背后的电路、代码的设计与实现，而这些消费者看不见的东西，才真正地反映了公司的核心竞争力。</p>
<p>最后引用乔布斯的一句话：</p>
<p>“如果你是个木匠，正在打造一个漂亮的五斗柜，你是不会在柜子后面用三合板的，哪怕那一面对着墙，永远没人看到它；你知道它在那里，所以即使是柜子后面，你也会用上好的木材；为了能在晚上睡个好觉，你会在审美和质量上自始至终争取做到最好。”</p>
<blockquote>
<p>如有错误，欢迎指出！<br>如需转载，请注明出处~<br>email:<a href="mailto:&#99;&#x72;&#101;&#x61;&#116;&#x69;&#x76;&#101;&#46;&#x77;&#x6f;&#x72;&#107;&#x2e;&#103;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#99;&#x72;&#101;&#x61;&#116;&#x69;&#x76;&#101;&#46;&#x77;&#x6f;&#x72;&#107;&#x2e;&#103;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a><br>欢迎交流学习！</p>
</blockquote>
]]></content>
      <categories>
        <category>zen</category>
        <category>thoughts</category>
      </categories>
      <tags>
        <tag>zen</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机中数的表示</title>
    <url>/2022/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<p>介绍计算机中，数的基本表示方法</p>
<span id="more"></span>
<h1 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h1><table>
<thead>
<tr>
<th>binary</th>
<th>decimal</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>0</td>
</tr>
<tr>
<td>0001</td>
<td>1</td>
</tr>
<tr>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>0011</td>
<td>3</td>
</tr>
<tr>
<td>0100</td>
<td>4</td>
</tr>
<tr>
<td>0101</td>
<td>5</td>
</tr>
<tr>
<td>0110</td>
<td>6</td>
</tr>
<tr>
<td>0111</td>
<td>7</td>
</tr>
<tr>
<td>1000</td>
<td>8</td>
</tr>
<tr>
<td>1001</td>
<td>9</td>
</tr>
<tr>
<td>1010</td>
<td>10</td>
</tr>
<tr>
<td>1011</td>
<td>11</td>
</tr>
<tr>
<td>1100</td>
<td>12</td>
</tr>
<tr>
<td>1101</td>
<td>13</td>
</tr>
<tr>
<td>1110</td>
<td>14</td>
</tr>
<tr>
<td>1111</td>
<td>15</td>
</tr>
</tbody></table>
<h1 id="负数"><a href="#负数" class="headerlink" title="负数"></a>负数</h1><h2 id="把right-most-bit作为符号位"><a href="#把right-most-bit作为符号位" class="headerlink" title="把right-most bit作为符号位"></a>把right-most bit作为符号位</h2><table>
<thead>
<tr>
<th>binary</th>
<th>decimal</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>0</td>
</tr>
<tr>
<td>0001</td>
<td>1</td>
</tr>
<tr>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>0011</td>
<td>3</td>
</tr>
<tr>
<td>0100</td>
<td>4</td>
</tr>
<tr>
<td>0101</td>
<td>5</td>
</tr>
<tr>
<td>0110</td>
<td>6</td>
</tr>
<tr>
<td>0111</td>
<td>7</td>
</tr>
<tr>
<td>1000</td>
<td>-0</td>
</tr>
<tr>
<td>1001</td>
<td>-1</td>
</tr>
<tr>
<td>1010</td>
<td>-2</td>
</tr>
<tr>
<td>1011</td>
<td>-3</td>
</tr>
<tr>
<td>1100</td>
<td>-4</td>
</tr>
<tr>
<td>1101</td>
<td>-5</td>
</tr>
<tr>
<td>1110</td>
<td>-6</td>
</tr>
<tr>
<td>1111</td>
<td>-7</td>
</tr>
</tbody></table>
<h3 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h3><ol>
<li>有两0：0 和 -0</li>
<li>运算<br>$$-1 + 1:$$<br>$$1001 + 0001 &#x3D; 1010$$<br>结果是：-2，wrong</li>
</ol>
<h2 id="有没有更好的方法？"><a href="#有没有更好的方法？" class="headerlink" title="有没有更好的方法？"></a>有没有更好的方法？</h2><p>用 <code>2^n - x</code>来表示 <code>x</code>的负数</p>
<table>
<thead>
<tr>
<th>binary</th>
<th>decimal</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>0</td>
</tr>
<tr>
<td>0001</td>
<td>1</td>
</tr>
<tr>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>0011</td>
<td>3</td>
</tr>
<tr>
<td>0100</td>
<td>4</td>
</tr>
<tr>
<td>0101</td>
<td>5</td>
</tr>
<tr>
<td>0110</td>
<td>6</td>
</tr>
<tr>
<td>0111</td>
<td>7</td>
</tr>
<tr>
<td>1000</td>
<td>-8</td>
</tr>
<tr>
<td>1001</td>
<td>-7</td>
</tr>
<tr>
<td>1010</td>
<td>-6</td>
</tr>
<tr>
<td>1011</td>
<td>-5</td>
</tr>
<tr>
<td>1100</td>
<td>-4</td>
</tr>
<tr>
<td>1101</td>
<td>-3</td>
</tr>
<tr>
<td>1110</td>
<td>-2</td>
</tr>
<tr>
<td>1111</td>
<td>-1</td>
</tr>
</tbody></table>
<p>再计算<br>$$1 + -1: $$<br>$$ 0001 + 1111 &#x3D; 10000 $$<br>其中，最高位溢出舍弃，所以结果为：0000，符合预期，再看看负数相加：<br>$$ -8 + 3:$$<br>$$1000 + 0011 &#x3D; 1011$$<br>等于-5，</p>
<p>$$ -4 + -3:$$<br>$$1100 + 1101 &#x3D; 11001$$<br>等于-7，</p>
<p>若是：<br>$$ -8 + -5:$$<br>$$1000 + 0011 &#x3D; 10011$$<br>等于3吗？显然不对，想想是为什么？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> a = <span class="number">-100</span>;</span><br><span class="line">    <span class="type">char</span> b = <span class="number">-100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a: %d, b: %d\n&quot;</span>, a, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a + b = %d\n&quot;</span>, (a + b));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a + b = %d\n&quot;</span>, (<span class="type">char</span>)(a + b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>outputs:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: -100, b: -100</span><br><span class="line">a + b = -200</span><br><span class="line">a + b = 56</span><br></pre></td></tr></table></figure>


<p>至此就很容易看出原因了。</p>
<h1 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h1><p>一个数的反码是按位取反，用公式表示：<br>$$(2^n - 1) - x$$</p>
<h1 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h1><p>最终，我们看到，计算出一个数的相反数，使用的是：<br>$$(2^n - 1)  - x +1$$<br>所以便有了人们常说的：一个数的相反数（负数&#x2F;负数的负数……）是这个数<strong>取反加一</strong></p>
<h1 id="为什么要用所谓的补码计算？"><a href="#为什么要用所谓的补码计算？" class="headerlink" title="为什么要用所谓的补码计算？"></a>为什么要用所谓的补码计算？</h1><p>方便，可以用加法做减法运算，省去了再做减法电路的麻烦</p>
]]></content>
  </entry>
</search>
